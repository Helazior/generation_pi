#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
on crait la police des chiffres.
Pour cela on peut écrire notre matrice représentant chaque chiffre.
Un chiffre fait 6 par 22
On va convertir ça pour gagner en performances et en mémoire.
on va mettre les coordonées des pixels noir dans une list.
On va faire un dictionnaire qui convertie les chiffres en 
une liste du chiffre.
"""
TAILLE_CARACTERE = (6, 22)
#à mettre dans un module
#________utile pour créer ma structure de donnée____
#_trop long pour le faire tourner à chaque fois, donc écrit en dur.
"""
def new_matrice(point='', chiffres=['']*10):
    '''n'est jamais utilisé dans le programme
    uniquement pas moi pour faire mes listes'''

    point = \
    "      "*20 +\
    "***   "*2

    chiffres[0] = \
    "******" + \
    "*    *"*20+\
    "******"

    chiffres[1] = \
    "     *"*22

    chiffres[2] = \
    "******"+\
    "     *"*9+\
    "******" + \
    "*     "*10+\
    "******"

    chiffres[3] = \
    "******"+ \
    "     *"*9+ \
    " *****" +  \
    "     *"*10+ \
    "******"

    chiffres[4] = \
    "*    *"+ \
    "*    *"*9+ \
    "******" +  \
    "     *"*10+ \
    "     *"

    chiffres[5] = \
    "******"+ \
    "*     "*9+ \
    "******" +  \
    "     *"*10+ \
    "******"

    chiffres[6] = \
    "******"+ \
    "*     "*9+ \
    "******" +  \
    "*    *"*10+ \
    "******"

    chiffres[7] = \
    "******"+ \
    "     *"*9+ \
    "     *" +  \
    "     *"*10+ \
    "     *"


    chiffres[8] = \
    "******"+ \
    "*    *"*9+ \
    "******" +  \
    "*    *"*10+ \
    "******"

    chiffres[9] = \
    "******"+ \
    "*    *"*9+ \
    "******" +  \
    "     *"*10+ \
    "******"
    return point, chiffres

def convert_to_coord(dico_chiffres):
    '''On passe dans un format plus petit et optimisé
    on veut en sortie une liste de coordonés aux pixels noir
    '''
    string_carac = ""
    for caractere in dico_chiffres:
        string_carac = dico_chiffres[caractere]
        dico_chiffres[caractere] = list()
        for indice in range(len(string_carac)):
            if string_carac[indice] == '*':
                pos = (indice % TAILLE_CARACTERE[0], indice // TAILLE_CARACTERE[0])
                dico_chiffres[caractere].append(pos)
    return dico_chiffres

point, chiffres = new_matrice()
dico_chiffres = {'-' : point}
for num in range(len(chiffres)):
    dico_chiffres[f"{num}"] = chiffres[num]
convert_to_coord(dico_chiffres)
print(dico_chiffres)
"""
DICO_LIST_COORD_CHIFFRES = {'-': [(0, 20), (1, 20), (2, 20), (0, 21), (1, 21), (2, 21)], '0': [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (0, 1), (5, 1), (0, 2), (5, 2), (0, 3), (5, 3), (0, 4), (5, 4), (0, 5), (5, 5), (0, 6), (5, 6), (0, 7), (5, 7), (0, 8), (5, 8), (0, 9), (5, 9), (0, 10), (5, 10), (0, 11), (5, 11), (0, 12), (5, 12), (0, 13), (5, 13), (0, 14), (5, 14), (0, 15), (5, 15), (0, 16), (5, 16), (0, 17), (5, 17), (0, 18), (5, 18), (0, 19), (5, 19), (0, 20), (5, 20), (0, 21), (1, 21), (2, 21), (3, 21), (4, 21), (5, 21)],\
                            '1': [(5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14), (5, 15), (5, 16), (5, 17), (5, 18), (5, 19), (5, 20), (5, 21)],\
                            '2': [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (5, 7), (5, 8), (5, 9), (0, 10), (1, 10), (2, 10), (3, 10), (4, 10), (5, 10), (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18), (0, 19), (0, 20), (0, 21), (1, 21), (2, 21), (3, 21), (4, 21), (5, 21)],\
                            '3': [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (5, 7), (5, 8), (5, 9), (1, 10), (2, 10), (3, 10), (4, 10), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14), (5, 15), (5, 16), (5, 17), (5, 18), (5, 19), (5, 20), (0, 21), (1, 21), (2, 21), (3, 21), (4, 21), (5, 21)],\
                            '4': [(0, 0), (5, 0), (0, 1), (5, 1), (0, 2), (5, 2), (0, 3), (5, 3), (0, 4), (5, 4), (0, 5), (5, 5), (0, 6), (5, 6), (0, 7), (5, 7), (0, 8), (5, 8), (0, 9), (5, 9), (0, 10), (1, 10), (2, 10), (3, 10), (4, 10), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14), (5, 15), (5, 16), (5, 17), (5, 18), (5, 19), (5, 20), (5, 21)],\
                            '5': [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), (1, 10), (2, 10), (3, 10), (4, 10), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14), (5, 15), (5, 16), (5, 17), (5, 18), (5, 19), (5, 20), (0, 21), (1, 21), (2, 21), (3, 21), (4, 21), (5, 21)],\
                            '6': [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), (1, 10), (2, 10), (3, 10), (4, 10), (5, 10), (0, 11), (5, 11), (0, 12), (5, 12), (0, 13), (5, 13), (0, 14), (5, 14), (0, 15), (5, 15), (0, 16), (5, 16), (0, 17), (5, 17), (0, 18), (5, 18), (0, 19), (5, 19), (0, 20), (5, 20), (0, 21), (1, 21), (2, 21), (3, 21), (4, 21), (5, 21)],\
                            '7': [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14), (5, 15), (5, 16), (5, 17), (5, 18), (5, 19), (5, 20), (5, 21)],\
                            '8': [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (0, 1), (5, 1), (0, 2), (5, 2), (0, 3), (5, 3), (0, 4), (5, 4), (0, 5), (5, 5), (0, 6), (5, 6), (0, 7), (5, 7), (0, 8), (5, 8), (0, 9), (5, 9), (0, 10), (1, 10), (2, 10), (3, 10), (4, 10), (5, 10), (0, 11), (5, 11), (0, 12), (5, 12), (0, 13), (5, 13), (0, 14), (5, 14), (0, 15), (5, 15), (0, 16), (5, 16), (0, 17), (5, 17), (0, 18), (5, 18), (0, 19), (5, 19), (0, 20), (5, 20), (0, 21), (1, 21), (2, 21), (3, 21), (4, 21), (5, 21)],\
                            '9': [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (0, 1), (5, 1), (0, 2), (5, 2), (0, 3), (5, 3), (0, 4), (5, 4), (0, 5), (5, 5), (0, 6), (5, 6), (0, 7), (5, 7), (0, 8), (5, 8), (0, 9), (5, 9), (0, 10), (1, 10), (2, 10), (3, 10), (4, 10), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14), (5, 15), (5, 16), (5, 17), (5, 18), (5, 19), (5, 20), (0, 21), (1, 21), (2, 21), (3, 21), (4, 21), (5, 21)]}

